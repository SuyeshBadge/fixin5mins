<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Self-Love Gradient Template</title>
  <style>
    /* Import fonts that are similar to "The Young Serif" and "Burgues Script" */
    @import url('https://fonts.googleapis.com/css2?family=DM+Serif+Display:ital@0;1&family=Cormorant+Garamond:ital,wght@0,300;0,400;0,500;0,600;0,700;1,400;1,600&family=Poppins:wght@300;400;500;600;700;800;900&family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600&family=Alex+Brush&family=Tangerine:wght@400;700&family=Great+Vibes&family=Dancing+Script:wght@400;500;600;700&family=Pacifico&family=Satisfy&display=swap');
    
    body {
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
    }
    
    .container {
      width: 1080px;
      height: 1080px;
      position: relative;
      /* Gradient background from light blue/lavender to pinkish-orange */
      background: linear-gradient(135deg, rgba(215,225,245,1) 0%, rgba(242,219,231,1) 50%, rgba(255,210,190,1) 100%);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 60px;
      box-sizing: border-box;
      overflow: hidden;
    }
    
    /* Decorative elements */
    .decorative-circle {
      position: absolute;
      border-radius: 50%;
      opacity: 0.5;
      z-index: 0;
    }
    
    .circle-1 {
      width: 300px;
      height: 300px;
      background: radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0) 70%);
      top: -50px;
      right: -50px;
    }
    
    .circle-2 {
      width: 400px;
      height: 400px;
      background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
      bottom: -100px;
      left: -100px;
    }
    
    .header {
      position: absolute;
      top: 60px;
      width: 100%;
      display: flex;
      justify-content: center;
      z-index: 2;
    }
    
    .handle-pill {
      background-color: #fff;
      border-radius: 30px;
      padding: 8px 25px;
      font-family: 'Poppins', sans-serif;
      font-size: 18px;
      font-weight: 600;
      color: #333;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      letter-spacing: 0.5px;
      text-transform: uppercase;
    }
    
    /* ATTENTION-GRABBING CONTENT STRUCTURE */
    .content {
      z-index: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      max-width: 900px;
      width: 100%;
    }
    
    /* Adaptive styles for different content types */
    
    /* Text-only content styles */
    .text-focus .stat-box {
      display: none;
    }
    
    .text-focus .insight-text {
      font-size: 42px;
      margin-bottom: 40px;
      line-height: 1.15;
      font-weight: 800;
    }
    
    .text-focus .highlight-word {
      background: linear-gradient(45deg, #6a5acd, #ff69b4);
      color: white;
      padding: 0 8px;
      border-radius: 4px;
      display: inline;
      white-space: pre-wrap;
      box-decoration-break: clone;
      -webkit-box-decoration-break: clone;
    }
    
    /* Stat-based content styles */
    .stat-focus .big-stat {
      font-size: 200px;
    }
    
    /* The big number/stat */
    .stat-box {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 30px;
    }
    
    /* Big number with gradient fill */
    .big-stat {
      font-family: 'Playfair Display', serif;
      font-size: 180px;
      line-height: 1;
      font-weight: 900;
      background: linear-gradient(45deg, #6a5acd, #ff69b4);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      margin: 0 0 10px;
      text-shadow: 4px 4px 10px rgba(0,0,0,0.1);
      position: relative;
    }
    
    /* Unit or label for the stat */
    .stat-unit {
      font-family: 'Poppins', sans-serif;
      font-size: 32px;
      font-weight: 800;
      color: #333;
      background-color: #fff;
      padding: 5px 15px;
      border-radius: 15px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.08);
      position: absolute;
      bottom: 15px;
      right: -20px;
    }
    
    /* Main insight text */
    .insight-text {
      font-family: 'DM Serif Display', serif;
      font-size: 36px;
      line-height: 1.2;
      color: #333;
      margin: 0 0 35px;
      max-width: 800px;
    }
    
    /* Action section */
    .action-section {
      background: #fff;
      border-radius: 20px;
      padding: 35px 40px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
      margin-bottom: 35px;
      position: relative;
      max-width: 700px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    
    /* Action label */
    .action-label {
      position: absolute;
      top: -15px;
      background: linear-gradient(45deg, #6a5acd, #ff69b4);
      color: white;
      font-weight: 700;
      font-size: 20px;
      padding: 5px 20px;
      border-radius: 30px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    }
    
    .action-label::before {
      content: "‚è±Ô∏è";
      margin-right: 6px;
    }
    
    /* Action step text */
    .action-text {
      font-family: 'Dancing Script', cursive;
      font-size: 42px;
      font-weight: 600;
      line-height: 1.3;
      color: #333;
      max-width: 600px;
      letter-spacing: 0.5px;
    }
    
    /* Results section */
    .results-container {
      position: relative;
      max-width: 650px;
      width: 100%;
      margin-bottom: 30px;
    }
    
    .results-box {
      background: rgba(255,255,255,0.5);
      border: 2px solid;
      border-image: linear-gradient(45deg, #6a5acd, #ff69b4) 1;
      border-radius: 15px;
      padding: 20px 30px;
      display: flex;
      align-items: center;
      width: 100%;
      box-sizing: border-box;
    }
    
    /* Star icon for results */
    .star-icon {
      font-size: 50px;
      margin-right: 20px;
    }
    
    /* Results text */
    .results-text {
      font-family: 'Cormorant Garamond', serif;
      font-size: 32px;
      font-weight: 500;
      font-style: italic;
      line-height: 1.3;
      color: #333;
      text-align: left;
    }
    
    /* Save this tag */
    .save-tag {
      position: absolute;
      right: 60px;
      bottom: 80px;
      background: linear-gradient(45deg, #6a5acd, #ff69b4);
      color: white;
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 22px;
      padding: 12px 25px;
      border-radius: 50px;
      box-shadow: 0 4px 15px rgba(106, 90, 205, 0.4);
      z-index: 5;
    }
    
    .save-tag::before {
      content: "üîñ";
      margin-right: 8px;
    }
    
    /* Date at bottom */
    .date {
      position: absolute;
      bottom: 60px;
      font-size: 16px;
      font-weight: 500;
      color: #555;
    }
  </style>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Smart content analysis and adaptation
      function enhanceContentDisplay() {
        // Get the main text elements
        const insightText = document.querySelector('.insight-text')?.textContent || '';
        
        // Check if we have explicit metric configuration
        <% if (typeof hasMetric !== 'undefined' && hasMetric === true) { %>
          // STATISTICAL CONTENT: Use provided metric
          document.querySelector('.content').classList.add('stat-focus');
          
          // Set the metric value
          const bigStat = document.querySelector('.big-stat');
          if (bigStat) bigStat.textContent = '<%= metricValue %>';
          
          // Set the unit if provided
          const statUnit = document.querySelector('.stat-unit');
          if (statUnit) statUnit.textContent = '<%= metricUnit %>';
        <% } else { %>
          // Text-based content without metric
          document.querySelector('.content').classList.add('text-focus');
          
          // Look for key words/phrases to highlight
          const keywordMatches = findKeywordsToHighlight(insightText);
          if (keywordMatches.length > 0) {
            // Get the first keyword match
            const keyword = keywordMatches[0];
            const startPos = insightText.toLowerCase().indexOf(keyword.toLowerCase());
            
            if (startPos > -1) {
              // Extract the actual word with proper casing
              const endPos = startPos + keyword.length;
              const actualWord = insightText.substring(startPos, endPos);
              
              // Create HTML with highlighted word
              const newText = insightText.substring(0, startPos) + 
                            '<span class="highlight-word">' + actualWord + '</span>' + 
                            insightText.substring(endPos);
              
              const insightElement = document.querySelector('.insight-text');
              if (insightElement) insightElement.innerHTML = newText;
            }
          }
        <% } %>
      }
      
      // Find keywords that should be highlighted for emphasis
      function findKeywordsToHighlight(text) {
        const lowercaseText = text.toLowerCase();
        const keywords = [
          'wrong', 'mistake', 'myth', 'lie', 'fail', 'never', 'always',
          'forget', 'ignore', 'stop', 'quit', 'avoid', 'worst',
          'best', 'only', 'fastest', 'easiest', 'most', 'least',
          'every', 
          'secret', 'hidden', 'surprising', 'shocking', 'unusual', 'rare',
          'stopping'
        ];
        
        // Return keywords that match as whole words using regex word boundaries
        return keywords.filter(keyword => {
          const regex = new RegExp('\\b' + keyword + '\\b', 'i');
          return regex.test(lowercaseText);
        });
      }
      
      // Run the content enhancement
      enhanceContentDisplay();
      
      // Set current date if needed
      const dateElement = document.querySelector('.date');
      if (dateElement && dateElement.textContent.trim() === '') {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        const currentDate = new Date().toLocaleDateString(undefined, options);
        dateElement.textContent = currentDate;
      }
    });
  </script>
</head>
<body>
  <div class="container">
    <!-- Decorative elements -->
    <div class="decorative-circle circle-1"></div>
    <div class="decorative-circle circle-2"></div>
    
    <div class="header">
      <div class="handle-pill">@<%= handle %></div>
    </div>
    
    <div class="content">
      <% // Determine if we're using enhanced viral content or legacy content %>
      <% if (typeof patternInterruptHook !== 'undefined' && patternInterruptHook) { %>
        <% if (typeof hasMetric !== 'undefined' && hasMetric === true && metricValue) { %>
        <div class="stat-box">
          <div class="big-stat"><%= metricValue %></div>
          <div class="stat-unit"><%= metricUnit %></div>
        </div>
        <% } else { %>
        <!-- No metric display for this content -->
        <% } %>
        
        <div class="insight-text"><%= patternInterruptHook %></div>
        
        <div class="action-section">
          <div class="action-label">5-MINUTE FIX</div>
          <div class="action-text"><%= actionStep %></div>
        </div>
        
        <div class="results-box">
          <div class="star-icon">‚ú®</div>
          <div class="results-text"><%= emotionalReward %></div>
        </div>
        
        <% if (typeof saveReason !== 'undefined' && saveReason) { %>
          <div class="save-tag">Save this!</div>
        <% } %>
      <% } else { %>
        <% if (typeof hasMetric !== 'undefined' && hasMetric === true && metricValue) { %>
        <div class="stat-box">
          <div class="big-stat"><%= metricValue %></div>
          <div class="stat-unit"><%= metricUnit %></div>
        </div>
        <% } else { %>
        <!-- No metric display for this content -->
        <% } %>
        
        <div class="insight-text"><%= emotionalHook %></div>
        
        <div class="action-section">
          <div class="action-label">5-MINUTE FIX</div>
          <div class="action-text"><%= actionStep %></div>
        </div>
        
        <div class="results-box">
          <div class="star-icon">‚ú®</div>
          <div class="results-text"><%= emotionalReward %></div>
        </div>
      <% } %>
    </div>
    
    <div class="date"><%= date || '' %></div>
  </div>
</body>
</html> 