<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Red Quote Template</title>
  <style>
    /* Import premium Google Fonts for more sophisticated typography */
    @import url('https://fonts.googleapis.com/css2?family=Cormorant+Garamond:ital,wght@0,400;0,600;0,700;1,600&family=DM+Serif+Display:ital@0;1&family=Poppins:wght@300;400;500;600;700;800;900&display=swap');
    
    body {
      margin: 0;
      padding: 0;
      font-family: 'Poppins', sans-serif;
    }
    
    .container {
      width: 1080px;
      height: 1080px;
      position: relative;
      /* Enhanced background with more elegant texture and subtle gradient overlay */
      background-color: #f8f5ef;
      background-image: 
        linear-gradient(135deg, rgba(255,251,245,0.8) 0%, rgba(242,236,228,0.8) 100%),
        url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23e0d9c8' fill-opacity='0.2' fill-rule='evenodd'/%3E%3C/svg%3E");
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      padding: 60px;
      box-sizing: border-box;
      /* Add subtle border/frame effect */
      border: 25px solid rgba(230, 58, 58, 0.05);
      box-shadow: inset 0 0 30px rgba(0,0,0,0.03);
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      position: relative;
      z-index: 1;
    }
    
    .date {
      font-size: 16px;
      font-weight: 300;
      letter-spacing: 1px;
      color: #888;
      font-family: 'Poppins', sans-serif;
      text-transform: uppercase;
    }
    
    .content {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      position: relative;
      z-index: 1;
      width: 100%;
    }
    
    .heading {
      font-size: 20px;
      font-weight: 500;
      color: #333;
      margin-bottom: 15px;
      letter-spacing: 1px;
      text-transform: uppercase;
      font-family: 'Poppins', sans-serif;
    }
    
    /* DRAMATIC REDESIGN - New attention-grabbing styles */
    
    /* Big stat/number for instant attention */
    .big-stat {
      font-family: 'DM Serif Display', serif;
      font-size: 180px;
      font-weight: 700;
      color: #e63a3a;
      line-height: 0.9;
      margin: 0 0 10px;
      text-shadow: 2px 2px 0 rgba(230, 58, 58, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Unit/descriptor for the big stat */
    .stat-unit {
      font-family: 'Poppins', sans-serif;
      font-size: 32px;
      font-weight: 600;
      color: #333;
      text-transform: uppercase;
      margin-bottom: 40px;
      letter-spacing: 2px;
    }
    
    /* Special style for percentage unit to appear inline with the number */
    .percent-unit {
      font-family: 'DM Serif Display', serif;
      font-size: 90px;
      font-weight: 700;
      color: #333;
      margin-left: 0;
      margin-bottom: 10px;
      align-self: flex-end;
      line-height: 0.7;
    }
    
    /* Caption that explains the stat */
    .stat-caption {
      font-family: 'DM Serif Display', serif;
      font-size: 40px;
      font-style: italic;
      line-height: 1.2;
      color: #e63a3a;
      max-width: 800px;
      margin-bottom: 50px;
      text-shadow: 1px 1px 0 rgba(230, 58, 58, 0.1);
    }
    
    /* Action step - big and bold */
    .action-label {
      font-family: 'Poppins', sans-serif;
      font-size: 28px;
      font-weight: 800;
      color: #333;
      text-transform: uppercase;
      letter-spacing: 2px;
      margin-bottom: 15px;
    }
    
    .action-step {
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 36px;
      line-height: 1.3;
      color: #e63a3a;
      background-color: rgba(230, 58, 58, 0.08);
      max-width: 780px;
      padding: 25px 35px;
      border-radius: 15px;
      margin-bottom: 30px;
      box-shadow: 0 4px 10px rgba(230, 58, 58, 0.1);
      position: relative;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
    
    /* Emoji icon before action step */
    .action-step::before {
      content: "‚ö°Ô∏è";
      font-size: 30px;
      margin-right: 10px;
      vertical-align: middle;
    }
    
    /* Result - what happens */
    .result-container {
      position: relative;
      max-width: 600px;
      width: 100%;
      margin-bottom: 30px;
      padding-top: 20px; /* Add padding at the top for the save button */
    }
    
    .result-box {
      display: flex;
      align-items: center;
      background-color: rgba(255, 255, 255, 0.7);
      border: 2px solid #e63a3a;
      border-radius: 15px;
      padding: 15px 30px;
      width: 100%;
      box-sizing: border-box;
    }
    
    .result-icon {
      font-size: 50px;
      margin-right: 20px;
    }
    
    .result-text {
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
      font-size: 26px;
      line-height: 1.3;
      color: #333;
      text-align: left;
    }
    
    /* Save prompt box */
    .save-box {
      position: absolute;
      right: -15px;
      top: -15px;
      background-color: #e63a3a;
      color: white;
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 22px;
      padding: 12px 25px;
      border-radius: 50px;
      box-shadow: 0 4px 15px rgba(230, 58, 58, 0.3);
      z-index: 10;
    }
    
    .save-box::before {
      content: "üîñ";
      margin-right: 8px;
    }
    
    .footer {
      text-align: left;
      position: relative;
      z-index: 1;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .handle {
      font-size: 20px;
      color: #5d4d3d;
      text-transform: uppercase;
      letter-spacing: 3px;
      font-weight: 500;
      font-family: 'Poppins', sans-serif;
      display: inline-block;
      padding-bottom: 3px;
      border-bottom: 2px solid rgba(230, 58, 58, 0.3);
    }
    
    /* 5-min indicator */
    .time-indicator {
      display: flex;
      align-items: center;
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 18px;
      color: #e63a3a;
    }
    
    .time-indicator::before {
      content: "‚è±Ô∏è";
      margin-right: 6px;
      font-size: 22px;
    }
    
    /* Additional styles for adaptive content */
    
    /* Text-focused styles (when no statistic is present) */
    .text-focus .stat-caption.enhanced {
      font-size: 54px; /* Larger text for non-statistic content */
      font-weight: 800;
      line-height: 1.15;
      margin-bottom: 30px;
      max-width: 900px;
    }
    
    /* Highlight for key words in text-focused content */
    .highlight-word {
      background-color: #e63a3a;
      color: white;
      padding: 0 5px;
      border-radius: 4px;
    }
    
    /* Statistic-focused styles */
    .stat-focus .big-stat {
      font-size: 190px; /* Slightly larger for emphasis */
    }
    
    .stat-focus .stat-caption {
      font-size: 36px; /* Slightly smaller to complement big stat */
    }
  </style>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Smart content enhancement function - adapts display based on content
      function enhanceContent() {
        // Get the main hook/caption text
        const hookText = document.querySelector('.stat-caption')?.textContent || '';
        
        // Check for numbers or statistics in the hook
        const numberMatch = hookText.match(/\b(\d+)(?:\.\d+)?%?\b/);
        
        if (numberMatch && numberMatch[1]) {
          // STATISTICAL CONTENT: Show and update big number
          const number = numberMatch[1];
          const bigStat = document.querySelector('.big-stat');
          
          if (bigStat) {
            // Update the big statistic with the extracted number
            bigStat.textContent = number;
            
            // Determine appropriate unit
            let unit = '';
            let isPercent = false;
            if (hookText.includes('%')) {
              unit = '%';
              isPercent = true;
            } else if (hookText.toLowerCase().includes('minute')) {
              unit = 'MIN';
            } else if (hookText.toLowerCase().includes('second')) {
              unit = 'SEC';
            } else if (hookText.toLowerCase().includes('hour')) {
              unit = 'HRS';
            } else if (hookText.toLowerCase().includes('day')) {
              unit = 'DAYS';
            }
            
            // Handle percent display differently
            if (isPercent) {
              // Create percent span inside the big-stat
              const percentSpan = document.createElement('span');
              percentSpan.className = 'percent-unit';
              percentSpan.textContent = unit;
              bigStat.appendChild(percentSpan);
              
              // Hide the regular unit display
              const statUnit = document.querySelector('.stat-unit');
              if (statUnit) statUnit.style.display = 'none';
            } else {
              // Update the unit for non-percentage values
              const statUnit = document.querySelector('.stat-unit');
              if (statUnit) statUnit.textContent = unit;
            }
            
            // Add stat-focus class to the container
            document.querySelector('.content').classList.add('stat-focus');
          }
        } else {
          // TEXT-BASED CONTENT: Enhance text presentation
          document.querySelector('.content').classList.add('text-focus');
          
          // Hide the stat elements
          const statBox = document.querySelector('.stat-box');
          if (statBox) statBox.style.display = 'none';
          
          // Make the caption text larger and more prominent
          const statCaption = document.querySelector('.stat-caption');
          if (statCaption) {
            statCaption.classList.add('enhanced');
            
            // Check for keywords to highlight
            const keywordMatches = findKeywordsToHighlight(hookText);
            if (keywordMatches.length > 0) {
              // Highlight the first matching keyword
              const keyword = keywordMatches[0];
              const startPos = hookText.toLowerCase().indexOf(keyword.toLowerCase());
              if (startPos > -1) {
                const endPos = startPos + keyword.length;
                const actualWord = hookText.substring(startPos, endPos);
                const newText = hookText.substring(0, startPos) + 
                              '<span class="highlight-word">' + actualWord + '</span>' + 
                              hookText.substring(endPos);
                statCaption.innerHTML = newText;
              }
            }
          }
        }
      }
      
      // Helper function to find keywords worth highlighting
      function findKeywordsToHighlight(text) {
        const lowercaseText = text.toLowerCase();
        const keywords = [
          'wrong', 'mistake', 'myth', 'lie', 'fail', 'never', 'always',
          'forget', 'ignore', 'stop', 'quit', 'avoid', 'worst',
          'best', 'only', 'fastest', 'easiest', 'most', 'least',
          'every','secret', 'hidden', 'surprising', 'shocking', 'unusual', 'rare',
          'stopping'
        ];
        
        // Return keywords that match as whole words using regex word boundaries
        return keywords.filter(keyword => {
          const regex = new RegExp('\\b' + keyword + '\\b', 'i');
          return regex.test(lowercaseText);
        });
      }
      
      // Call the enhancement function
      enhanceContent();
    });
  </script>
</head>
<body>
  <div class="container">
    <div class="header">
      <% if (heading) { %>
        <div class="heading"><%= heading %></div>
      <% } %>
      <% if (date) { %>
        <div class="date"><%= date %></div>
      <% } %>
    </div>
    
    <div class="content">
      <% /* NEW ATTENTION-GRABBING LAYOUT */ %>
      <% if (typeof patternInterruptHook !== 'undefined' && patternInterruptHook) { %>
        
        <% /* Stat container that adapts based on content type */ %>
        <div class="stat-box">
          <div class="big-stat">40</div>
          <div class="stat-unit" id="stat-unit">MIN</div>
        </div>
        
        <div class="stat-caption"><%= patternInterruptHook %></div>
        
        <div class="action-label">5-MINUTE FIX</div>
        <div class="action-step"><%= actionStep %></div>
        
        <div class="result-container">
          <% if (typeof saveReason !== 'undefined' && saveReason) { %>
            <div class="save-box">Save this!</div>
          <% } %>
          <div class="result-box">
            <div class="result-icon">üöÄ</div>
            <div class="result-text"><%= emotionalReward %></div>
          </div>
        </div>
      
      <% /* Fallback for legacy format */ %>
      <% } else if (typeof emotionalHook !== 'undefined') { %>
        <div class="stat-box">
          <div class="big-stat">40</div>
          <div class="stat-unit" id="stat-unit">MIN</div>
        </div>
        
        <div class="stat-caption"><%= emotionalHook %></div>
        
        <div class="action-label">5-MINUTE FIX</div>
        <div class="action-step"><%= actionStep %></div>
        
        <div class="result-container">
          <% if (typeof saveReason !== 'undefined' && saveReason) { %>
            <div class="save-box">Save this!</div>
          <% } %>
          <div class="result-box">
            <div class="result-icon">üöÄ</div>
            <div class="result-text"><%= emotionalReward %></div>
          </div>
        </div>
      <% } %>
    </div>
    
    <div class="footer">
      <div class="handle">@<%= handle %></div>
      <div class="time-indicator">Takes just 5 minutes</div>
    </div>
  </div>
</body>
</html>